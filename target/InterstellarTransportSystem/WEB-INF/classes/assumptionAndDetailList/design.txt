Assumption : It is a undirected weight graph where distance from A to B is same as the distance from B to A

Always calculating the distance from EARTH as the source
=================================================================================================================================

Imortant notice point 1 ---->While import the project into the eclipse then should right click on the context of the project -> click on properties -> select 'Deployment Assembly'
-> click on Add button -> select Java Build PAth Entries -> select Maven dependecies and click ok and apply.

It is to successful loading of the contextloadinglistener.

Important notice point 2---->Before running the Application, should take care of the in memory database creation because by it will create in 
"C:\\Windows\system32\databaseName" by default, in this case database name is interstellarTransportSystem, so it will throws the exception that cannot create database.
So, please provide enough access to the folder or specified the folder where you want the database to be create or provide explicit folder or directory to crete the in memory database.

Not give path to create database(Simply give database name): if setting the property like this: <property name="connection.url">jdbc:derby:interstellarTransportSystem;create=true</property>
Then it will try to create the database in C:\\Windows\system32\databaseName under system32 in case of Windows or in MAC it will try to create in some private folder.

Provide path to create database(Database name with full accessible path): if setting the property like this: <property name="connection.url">jdbc:derby:/Applications/piyush/interstellarTransportSystem;create=true</property>
Then it will create the database under Applications/piyush folder in case of MAC and for windows provide accessibel path for ex: D:\\data.

I am using MAC OS, so i used <property name="connection.url">jdbc:derby:/Applications/piyush/interstellarTransportSystem;create=true</property>
as the connection url. You can change it from hibernate.cfg.xml and work accordingly
=================================================================================================================================

File Read and import it into Database:

At the time of startup static block will get execute and it will read the file and import the data into the derby database.
=================================================================================================================================

SOAP web service:
I am using port of the tomcat is 8080 and ipaddress is localhost

JAX WS service mapped by url pattern : /soapService i.e.

http://localhost:8080/InterstellarTransportSystem/soapService

It has request and response generated and put under the package name as "com.interstellar.transport.system.soap.jaxws" 
and the request class is 'GetShortestPath' and response is 'GetShortestPathResponse'

Generated XSD i.e. has been put at the project level i.e. interstellarTransportSystem.xsd or can generate using the below mentioned URL

GetShortestPath and GetShortestPathResponse generated by command : "wsgen -verbose -keep -cp . com.interstellar.transport.system.soap.ShortestPathSOAPServiceImpl"

WSDL url is "http://localhost:8080/InterstellarTransportSystem/soapService?wsdl"
XSD url is : "http://localhost:8080/InterstellarTransportSystem/soapService?xsd=1"
=================================================================================================================================
REST API

API's to maintain the database
ipaddress: localhost, port: 8080, context name: InterstellarTransportSystem, mapping started 

ARRANGED ORDERWISE:
0. CONTEXT INFO -> http://localhost:8080/InterstellarTransportSystem
1. GET NETWORK INFO-> http://localhost:8080/InterstellarTransportSystem/interstellar/get/network/info
2. REACH TO UPDATE LINK PAGE(to reach to update page) -> http://localhost:8080/InterstellarTransportSystem/interstellar/update/link/page
3. UPDATE LINK IN NETWORK-> http://localhost:8080/InterstellarTransportSystem/interstellar/update/link
4. REACH TO DELETE LINK PAGE(to reach to delete page) -> http://localhost:8080/InterstellarTransportSystem/interstellar/delete/link/page
5. DELETE -> http://localhost:8080/InterstellarTransportSystem/interstellar/delete/link
6. REACH TO SHORTEST PATH LINK PAGE(to reach to get shortest path information) -> http://localhost:8080/InterstellarTransportSystem/interstellar/shortest/path/link/page
7. Shortest Path Info(shortest path) -> http://localhost:8080/InterstellarTransportSystem/interstellar/shortest/path

=================================================================================================================================
Technologies used:

Spring, Hibernate, REST to manage the database, SOAP to return the request and response using Document literal webservice, Maven, jackson, Derby in memory database

=================================================================================================================================
Under package name: com.interstellar.transport.system.controller

InterstellarApplication and InterstellarAppTest provided to test through the main method of the validity of the CRUD operation

=================================================================================================================================
Future Release:

-->UI can be more interactive with the Cascade style use.

=================================================================================================================================





